// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
    username, email 
) VALUES (
    $1, $2
)
RETURNING id, username, email
`

type CreateUserParams struct {
	Username string
	Email    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const getUsers = `-- name: GetUsers :many





SELECT id, username
FROM "user"
`

type GetUsersRow struct {
	ID       int32
	Username string
}

// -- name: GetAuthor :one
// SELECT * FROM authors
// WHERE id = $1 LIMIT 1;
// -- name: ListAuthors :many
// SELECT * FROM authors
// ORDER BY name;
// -- name: CreateAuthor :one
// INSERT INTO authors (
//
//	name, bio
//
// -- ) VALUES (
//
//	$1, $2
//
// )
// RETURNING *;
// -- name: UpdateAuthor :exec
// UPDATE authors
//
//	set name = $2,
//	bio = $3
//
// WHERE id = $1;
// -- name: DeleteAuthor :exec
// DELETE FROM authors
// WHERE id = $1;
func (q *Queries) GetUsers(ctx context.Context) ([]GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(&i.ID, &i.Username); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
